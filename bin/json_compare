#!/usr/bin/env python

from cmdutils.git import GitVersion
from datetime import datetime
from subprocess import check_call, CalledProcessError
from os import path
import contextlib
import glob
import json
import requests
import sys

def file_path(fname):
    return path.join('tmp/json_compare', fname)

@contextlib.contextmanager
def open_config(fname):
    with open(file_path(fname)) as f:
        yield f

def headers():
    try:
        with open_config('.headers') as f:
            lines = [line.strip().split(': ', 2) for line in f]
            return dict(lines)
    except:
        pass

def urls():
    try:
        with open_config('.urls') as f:
            return json.loads(f.read())
    except IOError:
        raise Exception('DIE')
    except TypeError:
        raise Exception('Problem with format of url file')

def url_by_name(name):
    try:
        return urls()[name]
    except KeyError:
        raise Exception('url not found {}'.format(name))

def format_json(js):
    return json.dumps(js, sort_keys=True, indent=4)

def main():
    name = sys.argv[1]
    url = url_by_name(name)
    r = requests.get(url, headers=headers())
    version = GitVersion()
    output = write_version(name, r.json(), version)
    compare = find_latest_master(name)
    print "## request-time:", r.elapsed.total_seconds()
    print "-----comparing-----"
    print compare
    print output
    print "-----" * 4
    try:
        check_call(['git', 'diff', '--no-index', compare, output])
        print "No changes"
    except CalledProcessError:
        print "Output differs"

def write_version(name, data, version):
    timestamp = datetime.now().isoformat()
    path = output_path(name, version, timestamp)
    with open(path, 'w') as f:
        f.write(format_json(data))
    print 'wrote', path
    return path

def output_path(name, version=None, timestamp=None):
    parts = [name, str(version), timestamp, 'json']
    fname = '.'.join(filter(None, parts))
    return file_path(fname)

def find_latest_master(name):
    master_glob = output_path(name, 'master-*')
    files = glob.glob(master_glob)
    if len(files):
        files.sort(key=path.getmtime)
        return files[-1]

if __name__ == '__main__':
    main()
